<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.7                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2017                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
 */

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 */
class CRM_Contribute_Page_PaymentInfo extends CRM_Core_Page {
  public function preProcess() {
    $this->_component = CRM_Utils_Request::retrieve('component', 'String', $this, TRUE);
    $this->_action = CRM_Utils_Request::retrieve('action', 'String', $this, FALSE, 'browse');
    $this->_id = CRM_Utils_Request::retrieve('id', 'Positive', $this, TRUE);
    $this->_context = CRM_Utils_Request::retrieve('context', 'String', $this, TRUE);
    $this->_cid = CRM_Utils_Request::retrieve('cid', 'String', $this, TRUE);

    $this->assign('cid', $this->_cid);
    $this->assign('id', $this->_id);
    $this->assign('context', $this->_context);
    $this->assign('component', $this->_component);
    if ($this->_component != 'event') {
      $this->assign('hideButtonLinks', TRUE);
    }
  }

  public function browse() {
    $getTrxnInfo = $this->_context == 'transaction' ? TRUE : FALSE;

    $isPledgeEvent = FALSE;
    if ($this->_context == 'payment_info' && $this->_component == 'event') {
      $sql = "SELECT id FROM civicrm_pledge WHERE participant_id = %1";
      $isPledgeEvent = CRM_Core_DAO::singleValueQuery($sql, array(1 => array($this->_id, 'Integer')));
    }

    if ($isPledgeEvent) {
      $paymentInfo = self::getPledgePaymentInfo($this->_id, $this->_component);
    } else {
      $paymentInfo = CRM_Contribute_BAO_Contribution::getPaymentInfo($this->_id, $this->_component, $getTrxnInfo, TRUE);
    }
    if ($this->_context == 'payment_info') {
      $this->assign('paymentInfo', $paymentInfo);
    }
  }

  /**
   * Run page.
   *
   * This typically involves assigning the appropriate
   * smarty variable :)
   *
   * @return string
   *   The content generated by running this page
   */
  public function run() {
    $this->preProcess();
    if ($this->_action) {
      $this->browse();
    }

    return parent::run();
  }

  static function getPledgePaymentInfo($id, $component) {
    $info = array();

    //fixme: also check status is completed
    $sql = "SELECT SUM(cc.total_amount) as paid
      FROM civicrm_participant_payment pp
      INNER JOIN civicrm_contribution cc on cc.id = pp.contribution_id
      WHERE participant_id = %1 and cc.contribution_status_id = 1";
    $info['paid'] = CRM_Core_DAO::singleValueQuery($sql, array(1 => array($id, 'Integer')));

    $sql = "SELECT SUM(pp.scheduled_amount) as total
      FROM civicrm_participant pa
      INNER JOIN civicrm_pledge pl on pa.id = pl.participant_id
      INNER JOIN civicrm_pledge_payment pp on pl.id = pp.pledge_id
      WHERE participant_id = %1";
    $info['total'] = CRM_Core_DAO::singleValueQuery($sql, array(1 => array($id, 'Integer')));
    $info['balance'] = $info['total'] - $info['paid'];
    $info['transaction'] = array();

    return $info;
  }

}
